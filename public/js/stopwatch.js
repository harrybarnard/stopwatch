class StopWatch{constructor(){this.startDate=null,this.isRunning=!1,this.totalTime=0,this.lastLap=null}time(){return this.isRunning?this._getRunningTotal():this.totalTime}start(){this.isRunning||(this.isRunning=!0,this.startDate=Date.now(),this.lastLap=Date.now())}pause(){this.isRunning&&(this.isRunning=!1,this.totalTime=this.totalTime+this._getElapsed())}reset(){this.totalTime=0,this.isRunning?(this.startDate=Date.now(),this.lastLap=Date.now()):this.startDate=null}lap(){if(this.isRunning){var t=localStorage.length;return localStorage.setItem(t,this._getLapElapsed()),this.lastLap=Date.now(),localStorage.getItem(t)}return null}laps(){let t=[],a=Object.keys(localStorage),e=0,s;for(;s=a[e];e++)t.push({[s]:localStorage.getItem(s)});return t}_getElapsed(){return Date.now()-this._getStartDate()}_getRunningTotal(){return this.totalTime+this._getElapsed()}_getStartDate(){return this.startDate||null}_getLapElapsed(){return this.lastLap?Date.now()-this.lastLap:0}}$(document).ready(function(){const a=new StopWatch;let t=null;function e(){t&&clearInterval(t)}function s(t){let a=parseFloat(t);$(".laps > table > tbody").prepend("<tr><td> "+a.toTime()+"</td></tr>")}Number.prototype.toTime=function(){var t=(t,a=2)=>("00"+t).slice(-a);return t(this/36e5|0)+":"+t(this%36e5/6e4|0)+":"+t(this%6e4/1e3|0)+"."+t(this%1e3,3)},$(".sw-start").on("click",function(){t=setInterval(function(){const t=Math.round(a.time());$(".sw-time").html(t.toTime())},1),a.start(),$(".sw-start").attr("disabled",!0),$(".sw-pause").attr("disabled",!1),$(".sw-reset").attr("disabled",!1),$(".sw-lap").attr("disabled",!1)}),$(".sw-pause").on("click",function(){e(),a.pause(),$(".sw-pause").attr("disabled",!0),$(".sw-lap").attr("disabled",!0),$(".sw-start").attr("disabled",!1)}),$(".sw-reset").on("click",function(){e(),a.reset(),$(".sw-time").html("00:00:00.000"),$(".sw-pause").attr("disabled",!0),$(".sw-reset").attr("disabled",!0),$(".sw-lap").attr("disabled",!0),$(".sw-start").attr("disabled",!1)}),$(".sw-lap").on("click",function(){(lap=a.lap())&&s(lap)}),$(".sw-clear").on("click",function(){a.lap(),localStorage.clear(),$(".laps > table > tbody").html("")}),a.laps().forEach(function(t){s(Object.values(t)[0])})});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
